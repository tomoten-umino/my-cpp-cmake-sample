name: build-test

on:
  # for debug
  workflow_dispatch:
  # for pull request check
  pull_request:
    branches:
      - 'main'
  schedule:
    # UTC 16:00 on Sunday ( JST 1:00 on Monday )
    - cron:  '0 16 * * 0'

jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: mcr.microsoft.com/vscode/devcontainers/cpp:0-bullseye

    steps:
      - name: update container package
        run: |
          apt-get update

      - name: install gtest
        run: |
          wget https://github.com/google/googletest/archive/release-1.12.1.tar.gz -O - | tar xzvf - 
          mkdir -p /usr/local/src 
          mv ./googletest-release-1.12.1 /usr/local/src/
          cd /usr/local/src/googletest-release-1.12.1
          mkdir ./build 
          cd ./build 
          cmake .. 
          make install 
          rm -rf /usr/local/src/googletest-release-1.12.1

      - name: checkout code
        uses: actions/checkout@v3

      - name: build
        run: |
          mkdir build; cd build
          cmake ..
          make all
          cd ..; tar czvf build.tar.gz build

      - name: upload test binary
        uses: actions/upload-artifact@v3
        with:
          name: test-driver
          path: build.tar.gz
          retention-days: 1

  unit-test:
    needs: build
    runs-on: ubuntu-22.04
    container:
      image: mcr.microsoft.com/vscode/devcontainers/cpp:0-bullseye

    steps:
      - name: update container package
        run: |
          apt-get update

      - name: checkout code
        uses: actions/checkout@v3

      - name: download test binary
        uses: actions/download-artifact@v3
        with:
          name: test-driver

      - name: run unit-test
        run: |
          tar xzvf build.tar.gz
          chmod 755 build/tests/unit-test
          # run unit-test
          build/tests/unit-test
          # get coverage rate
          gcov -n ./build/tests/CMakeFiles/unit-test.dir/__/lib/mylib/mylib.cpp.gcda |
          while read -r FILE; read -r LINE;
          do
            if echo "${FILE}" | grep "mylib" >/dev/null; then
              echo "${LINE}" | sed -n 's/Lines executed://p' | sed -n 's/%.*//p' >tmp
            fi
          done
          echo "COVERAGE=$(cat tmp)" >> $GITHUB_ENV

      - name: summarize coverage
        run: |
          str=$(cat <<EOS
            # Unit Test Coverage
            https://img.shields.io/badge/Coverage-${COVERAGE}-green?style=flat&logo=github
            EOS
          )
          echo "$str" >> $GITHUB_STEP_SUMMARY

      - name: create coverage badge
        if: github.event_name == 'schedule' || ( github.event_name == 'workflow_dispatch' && github.ref_name == 'main' )
        uses: schneegans/dynamic-badges-action@v1.3.0
        with:
          auth: ${{ secrets.MY_GIST_TOKEN }}
          gistID: 6f275fbd0ca79af67c1d90f9ba524212
          filename: my-coverage.json
          label: Coverage
          message: ${{ env.COVERAGE }}
          namedLogo: github
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 100
          minColorRange: 0
