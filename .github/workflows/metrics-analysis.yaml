name: metrics-analysis

on:
  # for debug
  workflow_dispatch:
  # for pull request check
  pull_request:
    branches:
      - 'main'

jobs:
  metrics-analysis:
    runs-on: ubuntu-22.04
    container:
      image: mcr.microsoft.com/vscode/devcontainers/cpp:0-bullseye
    
    steps:
      - name: update container package
        run: |
          apt-get update
          apt-get -y install python3-pip sqlite3

      - name: checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # to diff between from_branch and to_branch
      - name: fetch repository
        if: success()
        run: |
          git config --global --add safe.directory /__w/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}
          git remote set-url origin https://github-actions:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
          git config --local user.name "${GITHUB_ACTOR}"
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git fetch

      - name: python package install
        if: success()
        run: |
          pip install -r requirements.txt

      - name: metrics analysis
        if: github.event_name == 'pull_request'
        id: metrics_analysis
        run: |
          metrix++ collect --log-level=INFO \
          --std.code.lines.code \
          --std.code.complexity.maxindent \
          --std.code.complexity.cyclomatic \
          --exclude-files=CMakeCXXCompilerId.cpp \
          --db-file=metrixpp.db \
          $(git diff ${{ github.head_ref }} remotes/origin/${{ github.base_ref }} --name-only)

      - name: metrics analysis all
        if: github.event_name != 'pull_request'
        id: metrics_analysis_all
        run: |
          metrix++ collect --log-level=INFO \
          --std.code.lines.code \
          --std.code.complexity.maxindent \
          --std.code.complexity.cyclomatic \
          --exclude-files=CMakeCXXCompilerId.cpp \
          --db-file=metrixpp.db

      - name: create comment header
        if: steps.metrics_analysis.outcome == 'success' || steps.metrics_analysis_all.outcome == 'success'
        run: |
          echo "# Result of Max Indent analysis" >max_indent_error.txt
          echo "# Result of Cyclomatic Complexity analysis" >max_cyclomatic_error.txt

      - name: check max indent
        id: check_max_indent
        if: steps.metrics_analysis.outcome == 'success'  || steps.metrics_analysis_all.outcome == 'success'
        run: | 
          # if all C/C++ files are not changed, count = 0
          if [ $(sqlite3 ./metrixpp.db 'SELECT COUNT(*) FROM "std.code.lines"') != "0" ]; then
            metrix++ limit --log-level=WARNING --db-file=metrixpp.db --max-limit=std.code.complexity:maxindent:4 >>max_indent_error.txt
          else
            echo "All C/C++ files are not changed." >>max_indent_error.txt
          fi
      
      - name: check max cyclomatic
        id: check_max_cyclomatic
        if: ( steps.metrics_analysis.outcome == 'success'  || steps.metrics_analysis_all.outcome == 'success' ) && ( success() || failure() )
        run: |
          # if all C/C++ files are not changed, count = 0
          if [ $(sqlite3 ./metrixpp.db 'SELECT COUNT(*) FROM "std.code.complexity"') != "0" ]; then
            metrix++ limit --log-level=WARNING --db-file=metrixpp.db --max-limit=std.code.complexity:cyclomatic:10 >>max_cyclomatic_error.txt
          else
            echo "All C/C++ files are not changed." >>max_cyclomatic_error.txt
          fi

      # to write summery
      - name: summarize result of indent
        id: result_of_indent_summary
        if: steps.check_max_indent.outcome == 'success'
        run: |
          text_indent=$(cat max_indent_error.txt)
          echo "$text_indent" >> $GITHUB_STEP_SUMMARY

#      # to write PR comment
#      - name: result of indent
#        id: result_of_indent
#        if: github.event_name == 'pull_request' && steps.check_max_indent.outcome == 'success'
#        run: |
#          text_indent=$(cat max_indent_error.txt)
#          echo "message_body<<EOF" >> $GITHUB_OUTPUT
#          echo "$text_indent" >> $GITHUB_OUTPUT
#          echo "EOF" >> $GITHUB_OUTPUT

#      # find comment for Indent
#      - name: Find comment for Indent
#        if: github.event_name == 'pull_request'
#        uses: peter-evans/find-comment@v2
#        id: fc-indent
#        with:
#          issue-number: ${{ github.event.pull_request.number }}
#          comment-author: 'github-actions[bot]'
#          body-includes: "Max Indent analysis"

#      - name: Create or update comment for Max Indent
#        if: github.event_name == 'pull_request' && steps.result_of_indent.outcome == 'success'
#        uses: peter-evans/create-or-update-comment@v3
#        with:
#          comment-id: ${{ steps.fc-indent.outputs.comment-id }}
#          issue-number: ${{ github.event.pull_request.number }}
#          body: |
#            ${{ steps.result_of_indent.outputs.message_body }}
#          edit-mode: replace

      # to write summery
      - name: summarize result of cyclomatic
        id: result_of_cyclomatic_all
        if: steps.check_max_cyclomatic.outcome == 'success'
        run: |
          text_indent=$(cat max_cyclomatic_error.txt)
          echo "$text_indent" >> $GITHUB_STEP_SUMMARY

      # to write PR comment
      - name: result of cyclomatic
        id: result_of_cyclomatic
        if: github.event_name == 'pull_request' && steps.check_max_cyclomatic.outcome == 'success'
        run: |
          text_cyclomatic=$(cat max_cyclomatic_error.txt)
          echo "message_body<<EOF" >> $GITHUB_OUTPUT
          echo "$text_cyclomatic" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # find comment for Cyclomatic Complexity
      - name: Find comment for Cyclomatic Complexity
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc-c-complexity
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: "Cyclomatic Complexity analysis"

      - name: Create or update comment for Cyclomatic Complexity
        if: github.event_name == 'pull_request' && steps.result_of_cyclomatic.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc-c-complexity.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.result_of_cyclomatic.outputs.message_body }}
          edit-mode: replace

      # find comment for Indent
      - name: Find comment for Summary
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc-summary
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: "Metrics analysis result"

      - name: Create or update comment for Metrics analysis
        if: github.event_name == 'pull_request' && steps.check_max_indent.outcome == 'success' && steps.check_max_cyclomatic.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc-indent.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Metrics Analysis Result: passed :heavy_check_mark:
            -> [go to result](https://github.com/tomoten-umino/my-cpp-cmake-sample/actions/runs/${{ github.run_id }})
          edit-mode: replace

      - name: Create or update comment for Metrics analysis
        if: github.event_name == 'pull_request' && ( steps.check_max_indent.outcome == 'failure' || steps.check_max_cyclomatic.outcome == 'failure' )
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc-indent.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Metrics Analysis Result: failed :heavy_multiplication_x:
            -> [go to result](https://github.com/tomoten-umino/my-cpp-cmake-sample/actions/runs/${{ github.run_id }})
          edit-mode: replace